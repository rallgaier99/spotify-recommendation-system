{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Analysis","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XFFErRmvH-Cx"},"source":["K-Means CLustering Alg"]},{"cell_type":"code","metadata":{"id":"XpJ4WCotH3Ni"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8C--34A6IVkg"},"source":["User Sign-In + Pull User Data"]},{"cell_type":"code","metadata":{"id":"CZXUzza6OMMs","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"error","timestamp":1618618397627,"user_tz":240,"elapsed":232,"user":{"displayName":"Valerie Santoso","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj9PAzO557FYDDBjVWnXOnwedqsjgaS9WPbOdvy6w=s64","userId":"12861586869247165381"}},"outputId":"e4b2391d-0601-48c5-adc3-bf575ead9953"},"source":["# can we get the average value of each of the features for the user data?\n","import requests\n","import spotipy\n","from spotipy.oauth2 import SpotifyOAuth\n","import spotipy.util as util\n","import pandas as pd\n","import os\n","\n","usernames = [\"joshhall811\",  \"sheepran\", \"willreich77-us\", \"vals0405\", \"melpel-shell\"] #for final product can create this list with prompt to users\n","client_id = \"7857e62ab9094421af53b8c63e70fad9\"               \n","client_secret = \"0393d6515a334a6e8a05d081e5ee5c27\"\n","redirect_uri = \"http://localhost\"\n","\n","def main():\n","\toutput = {}\n","\tfor i in range(len(usernames)):\n","\n","\t\t#create directory for caching user login\n","\t\tcaches_folder = '.spotify-caches/'\n","\t\tsession_path = caches_folder + usernames[i]\n","\t\tif not os.path.exists(caches_folder):\n","\t\t\tos.makedirs(caches_folder)\n","   \n","    #initialize auth manager\n","\t\tcache_handler = spotipy.cache_handler.CacheFileHandler(cache_path=session_path)\n","\t\tauth_manager = SpotifyOAuth(client_id=client_id, client_secret = client_secret, redirect_uri = redirect_uri, scope='user-top-read', cache_handler=cache_handler, show_dialog=True)\n","\t\t\n","\t\t#create authorization\n","\t\tsp = spotipy.Spotify(auth_manager = auth_manager)\n","\t\t#print(sp.current_user())\n","\n","\t\t#pull top tracks (can pull as many as we need, currently 50)\n","\t\ttracks = sp.current_user_top_tracks(50)\n","\n","\t\t#translate into list of ids of top tracks\n","\t\tids = []\n","\t\tfor track in tracks[\"items\"]:\n","\t\t\tids.append(track[\"id\"])\n","\n","\t\toutput[usernames[i]] = ids\n","\n","\n","\t\t#clear cache (may not be needed, idk this shit got confusing)\n","\t\tos.remove(session_path)\n","\n","\treturn output\n","\n","tracks = main()\n","\n","\n","def get_user_ids(tracks):\n","\t#convert to single list of all user song ids\n","\tout = []\n","\tfor user in tracks:\n","\t\tfor track in tracks[user]:\n","\t\t\tout.append(track)\n","\treturn out\n","\n","ids = get_user_ids(tracks) #list of groups song ids\n","\n","#convert to df of track ids and corresponding features\n","def get_features(tracks):\n","\tuser_df = pd.DataFrame()#init empty df\n","\ttoken = util.prompt_for_user_token(username=\"joshhall811\", scope=\"user-top-read\", client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri)\n","\tsp = spotipy.Spotify(auth = token)\n"," \n","\tfor user in tracks:\n","    if user_df.empty:#if empty, pull track features and create initial dataframe\n","\t\t\tfeat = sp.audio_features(tracks[user])\n","\t\t\tfor d in feat:\n","\t\t\t\td.pop(\"type\", None)\n","\t\t\t\td.pop(\"uri\", None)\n","\t\t\t\td.pop(\"track_href\", None)\n","\t\t\t\td.pop(\"analysis_url\", None)\n","\t\t\t\td.pop(\"duration_ms\", None)\n","\t\t\t\td.pop(\"time_signature\", None)\n","\t\t\tuser_df = pd.DataFrame(feat)\n","\t\t\tuser_df = user_df.set_index(\"id\")#sets song ids as df index\n","\t\t\n","    else:#if not empty, pull track features and append to existing df\n","\t\t\tfeat = sp.audio_features(tracks[user])\n","\t\t\tfor d in feat:\n","\t\t\t\td.pop(\"type\", None)\n","\t\t\t\td.pop(\"uri\", None)\n","\t\t\t\td.pop(\"track_href\", None)\n","\t\t\t\td.pop(\"analysis_url\", None)\n","\t\t\t\td.pop(\"duration_ms\", None)\n","\t\t\t\td.pop(\"time_signature\", None)\n","\t\t\tnext_df = pd.DataFrame(feat)\n","\t\t\tnext_df = next_df.set_index(\"id\")\n","\t\t\tuser_df = pd.concat([user_df, next_df], axis = 0)#appends new df to existing df\n","\treturn user_df\n","\n","\n","\n","user_song_df = get_features(tracks)#dataframe of ids and features"],"execution_count":null,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-af464d1066d3>\"\u001b[0;36m, line \u001b[0;32m68\u001b[0m\n\u001b[0;31m    if user_df.empty:#if empty, pull track features and create initial dataframe\u001b[0m\n\u001b[0m                                                                                ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"]}]},{"cell_type":"markdown","metadata":{"id":"HUn8bE2dIEEg"},"source":["Assigning User Group to Cluser\n"]},{"cell_type":"code","metadata":{"id":"bifxpjuyILq8"},"source":["features = [\"danceability\", \"energy\", \"key\", \"loudness\", \"mode\", \"speechiness\", \"acousticness\", \"instrumentalness\", \"liveness\", \"valence\", \"tempo\"]\n","\n","# Calculate Percentage Matching Songs\n","def get_song_match(cluster_song_ids, user_song_ids):\n","  intersect = set(cluster_songs_ids) & set(user_songs_ids)\n","  return double(len(intersect))/len(user_songs_ids)\n","\n","# Calculate Mean Feature Values of User input\n","def get_user_features(user_song_df):\n","  # user_features: {feature -> avg value of feature across user_songs}\n","  user_features = {}\n","  for feature in features:\n","    user_features[feature] = mean(df[feature])\n","\n","  return user_features\n","\n","# Select the winning cluster\n","# Cluster: {cluster_id -> {feature -> avg feature value}}\n","def select_cluster(clusters, user_song_df):\n","  # dict: cluster_id -> score\n","  cluster_score = {}\n","  user_features = get_user_features(user_song_df)\n","\n","  for i in clusters.keys():\n","    score = get_song_match(cluster)\n","    for f in features:\n","      score += -math.abs(clusters[i][f] - user_features[f])\n","    cluster_score[i] = score\n","\n","  # return the cluster_id with the max score\n","  return max(cluster_score, key=cluster_score.get)\n","  \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3P37ShmYK4sp"},"source":["Generate Reccommendation"]},{"cell_type":"code","metadata":{"id":"_5CiH9UMK7a3"},"source":[""],"execution_count":null,"outputs":[]}]}